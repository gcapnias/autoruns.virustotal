name: Publish

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  release:
    name: Release
    strategy:
      matrix:
        kind: ['linux', 'windows']
        include:
          - kind: linux
            os: ubuntu-latest
            target: linux-x64
          - kind: windows
            os: windows-latest
            target: win-x64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'

      - name: Generate custom release tag
        id: tag
        run: |
          echo "::set-output name=release_tag::autoruns.virustotal_$(date +"%Y.%m.%d_%H-%M")"
          # tag_name: ${{ steps.tag.outputs.release_tag }}

      - name: Build
        shell: bash
        run: |
          # Release name
          release_name="autoruns.virustotal-${{ matrix.target }}"          
          echo "release_name=$release_name"
          
          # Build everything
          dotnet publish autoruns.virustotal/autoruns.virustotal.csproj --framework netcoreapp3.1 --runtime "${{ matrix.target }}" -c Release -o "$release_name"

          # Release tag
          release_tag=$(git describe --tags --abbrev=0)
          # release_tag=${{ env.GitVersion_SemVer }}
          echo "release_tag=$release_tag"
          echo "release_tag=$release_tag" >> $GITHUB_ENV

          # Pack files
          if [ "${{ matrix.target }}" == "win-x64" ]; then
            release_filename="${release_name}-${release_tag}.zip"
            echo "release_filename=$release_filename"
            echo "release_filename=$release_filename" >> $GITHUB_ENV
            
            # Pack to zip for Windows
            7z a -tzip "$release_filename" "./$release_name/*"
          else
            release_filename="${release_name}-${release_tag}.tar.gz"
            echo "release_filename=$release_filename"
            echo "release_filename=$release_filename" >> $GITHUB_ENV
            
            tar czvf "$release_filename" "$release_name"
          fi

          # Delete output directory
          rm -r "$release_name"

      - name: Publish
        id: publish
        uses: softprops/action-gh-release@v1
        with:
          fail_on_unmatched_files: true
          files: ${{ env.release_filename }}
          generate_release_notes: true
          tag_name: ${{ env.GitVersion_SemVer }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
